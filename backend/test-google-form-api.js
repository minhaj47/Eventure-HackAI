/**
 * Test script for Google Form Generation API
 * Run with: node test-google-form-api.js
 */

import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const BASE_URL = 'http://localhost:5000';
const TEST_TOKEN = 'your-test-jwt-token'; // Replace with actual JWT token for testing

// Test data
const testFormData = {
  formTitle: 'Test Event Registration Form',
  formDescription: 'This is a test form generated by the API test script',
  editorEmail: 'test@example.com'
};

const testEventId = '507f1f77bcf86cd799439011'; // Replace with actual event ID

/**
 * Make authenticated request
 */
const makeRequest = async (endpoint, method = 'GET', data = null) => {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {
        'Content-Type': 'application/json',
        ...(TEST_TOKEN && { 'Authorization': `Bearer ${TEST_TOKEN}` })
        // No SmythOS API key required
      },
      ...(data && { data })
    };

    console.log(`\nüîÑ ${method} ${endpoint}`);
    if (data) {
      console.log('üì§ Request data:', JSON.stringify(data, null, 2));
    }

    const response = await axios(config);
    
    console.log(`‚úÖ Status: ${response.status}`);
    console.log('üì• Response:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.log(`‚ùå Error: ${error.response?.status || 'Network Error'}`);
    console.log('üì• Error response:', JSON.stringify(error.response?.data || error.message, null, 2));
    throw error;
  }
};

/**
 * Test configuration check
 */
const testConfigurationCheck = async () => {
  console.log('\nüß™ Testing Google Form Configuration Check...');
  
  try {
    const result = await makeRequest('/api/event/google-form-config');
    
    if (result.success) {
      console.log('‚úÖ Configuration check passed');
      if (!result.configuration.isValid) {
        console.log('‚ö†Ô∏è  Configuration issues found:');
        result.configuration.issues.forEach(issue => {
          console.log(`   - ${issue}`);
        });
      }
    }
    
    return result;
  } catch (error) {
    console.log('‚ùå Configuration check failed');
    return null;
  }
};

/**
 * Test general Google Form generation
 */
const testGenerateGoogleForm = async () => {
  console.log('\nüß™ Testing General Google Form Generation...');
  
  try {
    const result = await makeRequest('/api/event/generate-google-form', 'POST', testFormData);
    
    if (result.success) {
      console.log('‚úÖ Google Form generated successfully');
      console.log(`üìã Form URL: ${result.data.formUrl}`);
      console.log(`‚úèÔ∏è  Edit URL: ${result.data.editFormUrl}`);
    }
    
    return result;
  } catch (error) {
    console.log('‚ùå Google Form generation failed');
    return null;
  }
};

/**
 * Test event registration form generation
 */
const testGenerateEventRegistrationForm = async () => {
  console.log('\nüß™ Testing Event Registration Form Generation...');
  
  try {
    const result = await makeRequest(
      `/api/event/${testEventId}/generate-registration-form`,
      'POST',
      { editorEmail: 'organizer@example.com' }
    );
    
    if (result.success) {
      console.log('‚úÖ Event registration form generated successfully');
      console.log(`üìã Form URL: ${result.data.formUrl}`);
      console.log(`‚úèÔ∏è  Edit URL: ${result.data.editFormUrl}`);
      console.log(`üé´ Event: ${result.event.name}`);
    }
    
    return result;
  } catch (error) {
    console.log('‚ùå Event registration form generation failed');
    if (error.response?.status === 404) {
      console.log('‚ÑπÔ∏è  This is expected if the test event ID doesn\'t exist');
    }
    return null;
  }
};

/**
 * Test service validation
 */
const testServiceValidation = async () => {
  console.log('\nüß™ Testing Service Validation...');
  
  // Test with missing form title
  try {
    await makeRequest('/api/event/generate-google-form', 'POST', {
      formDescription: 'Form without title'
    });
  } catch (error) {
    if (error.response?.status === 400) {
      console.log('‚úÖ Validation correctly rejected form without title');
    }
  }
  
  // Test with invalid event ID
  try {
    await makeRequest('/api/event/invalid-id/generate-registration-form', 'POST', {});
  } catch (error) {
    if (error.response?.status === 404 || error.response?.status === 400) {
      console.log('‚úÖ Validation correctly rejected invalid event ID');
    }
  }
};

/**
 * Test authentication
 */
const testAuthentication = async () => {
  console.log('\nüß™ Testing Authentication...');
  
  try {
    // Test without token
    const config = {
      method: 'GET',
      url: `${BASE_URL}/api/event/google-form-config`,
      headers: {
        'Content-Type': 'application/json'
        // No Authorization header
      }
    };

    await axios(config);
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('‚úÖ Authentication correctly required');
    } else {
      console.log('‚ö†Ô∏è  Unexpected response for unauthenticated request');
    }
  }
};

/**
 * Main test runner
 */
const runTests = async () => {
  console.log('üöÄ Starting Google Form API Tests...');
  console.log(`üîó Base URL: ${BASE_URL}`);
  console.log(`üîë Using token: ${TEST_TOKEN ? 'Yes' : 'No (will test auth errors)'}`);
  
  const results = {
    configCheck: null,
    generalForm: null,
    eventForm: null,
    validation: null,
    authentication: null
  };

  // Run tests
  results.configCheck = await testConfigurationCheck();
  results.generalForm = await testGenerateGoogleForm();
  results.eventForm = await testGenerateEventRegistrationForm();
  await testServiceValidation();
  await testAuthentication();

  // Summary
  console.log('\nüìä Test Summary:');
  console.log('================');
  
  const tests = [
    { name: 'Configuration Check', result: results.configCheck },
    { name: 'General Form Generation', result: results.generalForm },
    { name: 'Event Form Generation', result: results.eventForm }
  ];

  tests.forEach(test => {
    const status = test.result?.success ? '‚úÖ PASS' : '‚ùå FAIL';
    console.log(`${status} ${test.name}`);
  });

  console.log('\nüìù Notes:');
  console.log('- Make sure the backend server is running on port 5000');
  console.log('- Replace TEST_TOKEN with a valid JWT token for full testing');
  console.log('- Replace testEventId with a valid event ID from your database');
  console.log('- Configure SMYTHOS_GOOGLE_FORM_URL in your .env file');
  console.log('- The actual SmythOS integration will require a real agent endpoint');
};

// Run the tests
runTests().catch(console.error);
